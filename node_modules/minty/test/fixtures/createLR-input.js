'use strict';
let input = {};
input.parsed = { VariableDeclaration:
   [ { startLine: 2, endLine: 2, kind: 'const', variables: [ 'b' ] },
     { startLine: 3,
       endLine: 3,
       kind: 'var',
       variables: [ 'one', 'two', 'three' ] },
     { startLine: 4,
       endLine: 4,
       kind: 'var',
       variables: [ 'four', 'five' ] },
     { startLine: 5, endLine: 5, kind: 'var', variables: [ 'seven' ] },
     { startLine: 6, endLine: 6, kind: 'var', variables: [ 'six' ] },
     { startLine: 8, endLine: 8, kind: 'var', variables: [ 'expr' ] },
     { startLine: 10, endLine: 10, kind: 'let', variables: [ 'j' ] },
     { startLine: 14,
       endLine: 16,
       kind: 'var',
       variables: [ 'test2' ] },
     { startLine: 19,
       endLine: 19,
       kind: 'var',
       variables: [ 'regexstr' ] },
     { startLine: 24, endLine: 24, kind: 'var', variables: [ 'keys' ] },
     { startLine: 51, endLine: 51, kind: 'var', variables: [ 'bus' ] },
     { startLine: 54, endLine: 54, kind: 'var', variables: [ 'car' ] },
     { startLine: 57, endLine: 57, kind: 'var', variables: [ 'expr' ] } ],
  ForStatement: [ { startLine: 10, endLine: 12 } ],
  ForInStatement: [ { startLine: 24, endLine: 26 } ],
  ForOfStatement: [],
  WhileStatement: [],
  DoWhileStatement: [],
  SwitchStatement: [ { startLine: 59, endLine: 69 } ],
  SwitchCase:
   [ { startLine: 61, endLine: 63 },
     { startLine: 64, endLine: 66 },
     { startLine: 67, endLine: 68 } ],
  IfStatement: [ { startLine: 45, endLine: 47 } ],
  BreakStatement:
   [ { startLine: 63, endLine: 63 },
     { startLine: 66, endLine: 66 } ],
  YieldExpression: [],
  CallExpression:
   [ { startLine: 15, endLine: 15 },
     { startLine: 21, endLine: 21 },
     { startLine: 41, endLine: 42 },
     { startLine: 46, endLine: 46 },
     { startLine: 50, endLine: 50 },
     { startLine: 53, endLine: 53 },
     { startLine: 71, endLine: 71 } ],
  ReturnStatement: [],
  FunctionDeclaration:
   [ { startLine: 44, endLine: 55, parameters: [], name: 'fn' },
     { startLine: 49,
       endLine: 52,
       parameters: [ 'd', 'e', 'f' ],
       name: 'fn2' } ],
  FunctionExpression: [ { startLine: 14, endLine: 16, parameters: [] } ],
  ArrowFunctionExpression: [] }

  input.parseFunctionDec = [ { startLine: 44, endLine: 55, parameters: [], name: 'fn' },
    { startLine: 49,
      endLine: 52,
      parameters: [ 'd', 'e', 'f' ],
      name: 'fn2' } ];

  module.exports = input;
